#!/bin/sh

BASEAPP_NAME=dosgen
SUBAPP_NAME=web
APP_NAME="$BASEAPP_NAME-$SUBAPP_NAME"
#Užívateľ, ponechať root
USER="root"
#Enviroment, môže ostať production
NODE_ENV="production"
#Port aplikácie
PORT="8888"
#Cesta k zložke, kde sa nachádza server.js
APP_DIR="/home/user/app/$APP_NAME"
#Server.js, hlavný súbor aplikácie
NODE_APP="server.js"
CONFIG_DIR="$APP_DIR"
PID_DIR="/var/run"
PID_FILE="$PID_DIR/$APP_NAME.pid"
LOG_DIR="/var/log/$BASEAPP_NAME/$SUBAPP_NAME"
LOG_FILE="$LOG_DIR/$APP_NAME.log"
#Automatické vyhľadanie binárneho súboru "nodejs",
#v niektorých systémoch je inštalovaný ako "node".
#V takom prípade daný údaj prepísať.
NODE_EXEC=$(which node)


USAGE="Usage: $0 {start|stop|restart|status} [--force]"
FORCE_OP=false

ensure_root() {
    if [ "$EUID" -ne 0 ]; then
        echo "Please run as root"
        exit 1
    fi
}

pid_file_exists() {
    [ -f "$PID_FILE" ]
}

app_dir_exists() {
    if ! [ -d "$APP_DIR" ]; then
        echo $APP_DIR does not exist
	exit 1
    fi
}

get_pid() {
    echo "$(cat "$PID_FILE")"
}

is_running() {
    PID=$(get_pid)
    ! [ -z "$(ps aux | awk '{print $2}' | grep "^$PID$")" ]
}

start_it() {
    mkdir -p "$PID_DIR"
    chown $USER:$USER "$PID_DIR"
    mkdir -p "$LOG_DIR"
    chown $USER:$USER "$LOG_DIR"

    echo "Starting $APP_NAME ..."
    echo "cd $APP_DIR && PORT=$PORT NODE_ENV=$NODE_ENV NODE_CONFIG_DIR=$CONFIG_DIR $NODE_EXEC $APP_DIR/$NODE_APP 1>$LOG_FILE 2>&1 & echo \$! > $PID_FILE" | sudo -i -u $USER
    echo "$APP_NAME started with pid $(get_pid)"
}

stop_process() {
    PID=$(get_pid)
    echo "Killing process $PID"
    pkill -P $PID
}

remove_pid_file() {
    echo "Removing pid file"
    rm -f "$PID_FILE"
}

start_app() {
    ensure_root
    app_dir_exists
    if [ pid_file_exists == 0 ]; then
        if is_running; then
            PID=$(get_pid)
            echo "$APP_NAME already running with pid $PID"
            exit 1
        else
            if ! pid_file_exists; then
                echo "$APP_NAME stopped, but pid file exists"
            fi
            
	    if [ $FORCE_OP = true ]; then
                echo "Forcing start anyways"
                remove_pid_file
                start_it
            fi
        fi
    else
        start_it
    fi
}

stop_app() {
    ensure_root
    if pid_file_exists; then
        if is_running; then
            echo "Stopping $APP_NAME ..."
            stop_process
            remove_pid_file
            echo "$APP_NAME stopped"
        else
            echo "$APP_NAME already stopped, but pid file exists"
            if [ $FORCE_OP = true ]; then
                echo "Forcing stop anyways ..."
                remove_pid_file
                echo "$APP_NAME stopped"
            else
                exit 1
            fi
        fi
    else
        echo "$APP_NAME already stopped, pid file does not exist"
        exit 1
    fi
}

status_app() {
    if pid_file_exists; then
        if is_running; then
            PID=$(get_pid)
            echo "$APP_NAME running with pid $PID"
        else
            echo "$APP_NAME stopped, but pid file exists"
        fi
    else
        echo "$APP_NAME stopped"
    fi
}

case "$2" in
    --force)
        FORCE_OP=true
    ;;

    "")
    ;;

    *)
        echo $USAGE
        exit 1
    ;;
esac

case "$1" in
    start)
        start_app
    ;;

    stop)
        stop_app
    ;;

    restart)
        stop_app
        start_app
    ;;

    status)
        status_app
    ;;

    *)
        echo $USAGE
        exit 1
    ;;
esac
